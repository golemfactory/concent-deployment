resolver kube-dns.kube-system.svc.cluster.local;
error_log logs/error.log notice;

map $http_accept $extension {
    default html;
    application/json json;
}

{% if not nginx_storage_allow_http %}
# HTTP -> HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name    {{ storage_cluster_address }};
    return 302     https://$server_name$request_uri;

}
{% endif %}

server {
    {% if nginx_storage_allow_http %}
    # HTTP
    listen 80       default_server;
    {% endif %}

    {% if not nginx_storage_allow_http %}
    # When external connections over plain HTTP are blocked, we still want to allow them from inside the cluster
    listen 80;
    server_name nginx-storage.default.svc.cluster.local;
    {% endif %}

    # HTTPS
    listen 443      ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    ssl_certificate     /etc/ssl/secrets/nginx-storage-ssl.crt;
    ssl_certificate_key /etc/ssl/secrets/nginx-storage-ssl.key;

    # Add Diffie-Hellman group
    ssl_dhparam /etc/ssl/secrets/nginx-storage-dhparam.pem;

    gzip                     on;
    gzip_min_length          1000;
    gzip_proxied             expired no-cache no-store private auth;
    gzip_types               text/plain text/css text/javascript application/xml;
    client_max_body_size     {{ max_upload_size }};

    set $gatekeeper_api_backend http://gatekeeper.default.svc.cluster.local;

    # NOTE: OpenResty uses /usr/local/openresty/nginx/, not /etc/nginx/ as the default config location.
    # We have to use absolute path to include files from /etc/nginx/.
    include                  /etc/nginx/snippets/error-pages.conf;
    include                  /etc/nginx/snippets/file-transfer-endpoints.conf;

}
